#!/bin/bash
set -bEu -o pipefail

# Christopher Lee
# "smoke tests" a gbib or gbic Genome Browser with a Selenium Script
# If gbic option is passed, installs a Genome Browser mirror and
#    runs a Selenium script against it

# Global vars
pyloc="/Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5"
machine=""
loc=""
urlStub="http://127.0.0.1:808"
urlList=()

function testUrl ()
{
   curl $1 &> /dev/null
}

# runs vagrant commands to setup all or specific machines
function setupVMs () 
{
   if [ $machine == "all" ]; then
      vagrant up # with no machine name this starts all machines defined in Vagrantfile
      for num in 0 1 2 3; do
          urlList[${num}]="${urlStub}${num}"
      done
      echo ${urlList[@]}
   elif [ $machine == "ubuntu" ]; then
      vagrant up ubuntu14
      vagrant up ubuntu16
      urlList=("${urlStub}0" "${urlStub}1")
      echo ${urlList[@]}
   elif [ $machine == "centos" ]; then
      vagrant up centos6
      vagrant up centos7
      urlList=("${urlStub}2" "${urlStub}3")
      echo ${urlList[@]}
   fi
}

# installs Genome Browser on specific machine
function installBrowser () 
{
# this works because browserSetup.sh is already present on the machine
# via sync defined in the Vagrantfile
   if [ $machine == "all" ]; then
      machines=("ubuntu14" "ubuntu16" "centos6" "centos7")
      for mach in "${machines[@]}"; do
         vagrant ssh $mach -- sudo bash browserSetup.sh -b install
      done
   elif [ $machine == "ubuntu" ]; then
      machines=("ubuntu14" "ubuntu16")
      for mach in "${machines[@]}"; do
         vagrant ssh $mach -- sudo bash browserSetup.sh -b install
      done
   elif [ $machine == "centos" ]; then
      machines=("centos6" "centos7")
      for mach in "${machines[@]}"; do
         vagrant ssh $mach -- sudo bash browserSetup.sh -b install
      done
   fi
}

function tearDownVMs () 
{
   vagrant destroy
}

function showHelp ()
{
   cat << EOF
Usage: $0 [-h] -w [gbic|gbib] -m [ubuntu|centos|all]

   -h          Show this help and exit
   -w website  Test which instance of the Genome Browser we are testing.
               gbib uses the url http://127.0.0.1:1234
               gbic uses the -m parameter to find url
   -m machine  Which machine to test. By default tests all machines:
                  Ubuntu 14/16
                  Centos 6/7
               If "ubuntu" or "centos" is given we test both machines of that type.
               Only applicable if -w gbic is supplied.

Performs basic automated test of Genome Browser instance:
   Loads hgTracks and click into hgGene for Human and Mouse.
   Loads an hg19 custom track and checks that hgTracks loads.
   Loads a track hub and checks that hgTracks loads.
   Runs a blat against hg19.
   Runs an isPCR against hg19.
   Tests hgConvert and hgLiftOver.

These tests should run reasonably quickly so you can watch that they are running
and completing correcly.
EOF
}

# parse command line
OPTIND=1
while getopts "hw:m:" opt
do 
   case $opt in
      h)
         showHelp
         exit 0
         ;;
      w)
         loc=$OPTARG
         ;;
      m)
         machine=$OPTARG
         ;;
      '?')
         showHelp >&2
         exit 1
         ;;
   esac
done

if [ $OPTIND -eq 1 ]; then
   showHelp >&2
   exit 1
fi

### MAIN ###

# parse command line for errors and set machines var
if [ "$loc" != "gbib" -a "$loc" != "gbic" ]; then
   echo "Wrong -w option. Please use either \"gbib\" or \"gbic\"."
   showHelp >&2
   exit 1
fi

if [ "$loc" == "gbic" -a "$machine" != "ubuntu" -a "$machine" != "centos" -a "$machine" != "all" ]; then
      echo "Wrong machine name specified. Please use either \"all\" \"ubuntu\" or \"centos\"."
      showHelp >&2
      exit 1
fi 

if [ $loc == "gbib" ]; then
   # just run test against http://127.0.0.1:1234, assumes vm already running
   testUrl "http://127.0.0.1:1234"
   if [ $? -eq 0 ]; then
      $pyloc genomeTest.py http://127.0.0.1:1234
      echo
      exit 0
   else
      printf "GBiB not started yet. Please start your GBiB before running this test.\n"
      exit 1
   fi
else
   # start vms and run tests
   setupVMs
   installBrowser 
   if [ $? -eq 0 ]; then # browser install didn't fail
      for url in "${urlList[@]}"; do
         testUrl $url
         if [ $? -eq 0 ]; then
            $pyloc genomeTest.py $url
            echo
         else
            echo "$url does not have a browser installed yet. Install one first"
            exit 1
         fi
      done
   fi
fi
